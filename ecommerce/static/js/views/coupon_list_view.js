define([
        'jquery',
        'backbone',
        'underscore',
        'underscore.string',
        'moment',
        'text!templates/coupon_list.html',
        'dataTablesBootstrap'
    ],
    function ($,
              Backbone,
              _,
              _s,
              moment,
              CouponListViewTemplate) {

        'use strict';

        return Backbone.View.extend({
            className: 'coupon-list-view',

            template: _.template(CouponListViewTemplate),

            initialize: function () {
                this.listenTo(this.collection, 'update', this.refreshTableData);
            },

            getRowData: function (coupon) {
                return {
                    id: coupon.get('id'),
                    title: coupon.get('title'),
                    client: coupon.get('client')
                    // catalog: coupon.get('catalog'),
                    // start_date: moment(coupon.get('start_date')).format('MMMM DD, YYYY, h:mm A'),
                    // end_date: moment(coupon.get('end_date')).format('MMMM DD, YYYY, h:mm A'),
                    // discount: coupon.get('discount')
                };
            },

            renderCouponTable: function () {
                var filterPlaceholder = gettext('Search...'),
                    $emptyLabel = '<label class="sr">' + filterPlaceholder + '</label>';

                if (!$.fn.dataTable.isDataTable('#couponTable')) {
                    this.$el.find('#couponTable').DataTable({
                        autoWidth: false,
                        info: true,
                        paging: true,
                        oLanguage: {
                            oPaginate: {
                                sNext: gettext('Next'),
                                sPrevious: gettext('Previous')
                            },

                            // Translators: _START_, _END_, and _TOTAL_ are placeholders. Do NOT translate them.
                            sInfo: gettext('Displaying _START_ to _END_ of _TOTAL_ coupons'),

                            // Translators: _MAX_ is a placeholder. Do NOT translate it.
                            sInfoFiltered: gettext('(filtered from _MAX_ total coupons)'),

                            // Translators: _MENU_ is a placeholder. Do NOT translate it.
                            sLengthMenu: gettext('Display _MENU_ coupons'),
                            sSearch: ''
                        },
                        order: [[0, 'asc']],
                        columns: [
                            {
                                title: gettext('Name'),
                                data: 'title'
                            },
                            {
                                title: gettext('Client'),
                                data: 'client'
                            }
                            // {
                            //     title: gettext('Valid From'),
                            //     data: 'start_date'
                            // },
                            // {
                            //     title: gettext('Valid Until'),
                            //     data: 'end_date'
                            // }
                            // {
                            //     data: 'id',
                            //     visible: false,
                            //     searchable: true
                            // }
                        ]
                    });

                    // NOTE: #couponTable_filter is generated by dataTables
                    this.$el.find('#couponTable_filter label').prepend($emptyLabel);

                    this.$el.find('#couponTable_filter input')
                        .attr('placeholder', filterPlaceholder)
                        .addClass('field-input input-text')
                        .removeClass('form-control input-sm');

                }
            },

            render: function () {
                this.$el.html(this.template);
                this.renderCouponTable();
                this.refreshTableData();
                return this;
            },

            /**
             * Refresh the data table with the collection's current information.
             */
            refreshTableData: function () {
                var data = this.collection.map(this.getRowData, this),
                    $table = this.$el.find('#couponTable').DataTable();

                $table.clear().rows.add(data).draw();
                return this;
            }
        });
    }
);
